#Project Euler: Problem 12: Highly divisible triangular number
#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:

#1: 1
#3: 1, 3
#6: 1, 2, 3, 6
#10: 1, 2, 5, 10
#15: 1, 3, 5, 15
#21: 1, 3, 7, 21
#28: 1, 2, 4, 7, 14, 28

#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over n divisors?
def divisibleTriangleNumber(n):
    num = 0
    i = 1
    divideList = []
    while len(divideList) < n:
        divideList = []
        num = num+i
        for j in range(1, num+1):
            if num % j == 0:
                divideList.append(j)
        i += 1
    return '{} : {}'.format(num, divideList)


res1 = divisibleTriangleNumber(5)   #28
res2 = divisibleTriangleNumber(23)  #630.
res3 = divisibleTriangleNumber(167) #1385280.
res4 = divisibleTriangleNumber(374) #17907120.
res5 = divisibleTriangleNumber(500) #76576500.
print(res1,res2,res3,res4,res5)
